
plugins {
    id "java"
    id "advancedperipherals-loader"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "net.darkhax.curseforgegradle" version "1.1.16"
    id "net.minecraftforge.gradle" version "[6.0.18,6.2)"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

// Include resources generated by data generators.
sourceSets {
    main.resources {
        srcDir "src/generated/resources"
    }
    testMod {}
}

minecraft {

    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer file("src/main/resources/META-INF/accesstransformer.cfg")
    accessTransformer file("src/testMod/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
            properties "forge.logging.console.level": "debug"

            mods {
                advancedperipherals {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
            if (project.hasProperty("mc_uuid")) {
                args "--uuid", project.getProperty("mc_uuid")
            }
            if (project.hasProperty("mc_username")) {
                args "--username", project.getProperty("mc_username")
            }
            if (project.hasProperty("mc_accessToken")) {
                args "--accessToken", project.getProperty("mc_accessToken")
            }
        }

        server {
            workingDirectory project.file("server")

            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
            property "forge.logging.console.level", "info"

            mods {
                advancedperipherals {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
            property "forge.logging.console.level", "debug"

            args "--mod", "advancedperipherals", "--all",
                    "--existing", file("src/main/resources").toString(),
                    "--existing", file("src/generated/resources").toString(),
                    "--output", file("src/generated/resources/")

            mods {
                advancedperipherals {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        // testClient {
        //     workingDirectory project.file("test-files/client")
        //     parent runs.client

        //     mods {
        //         aptest {
        //             source sourceSets.testMod
        //         }
        //     }

        //     lazyToken("minecraft_classpath") {
        //         (configurations.implementationExtra.copyRecursive().resolve())
        //                 .collect { it.absolutePath }
        //                 .join(File.pathSeparator)
        //     }
        // }

        // testServer {
        //     workingDirectory project.file("test-files/server")
        //     parent runs.server

        //     mods {
        //         aptest {
        //             source sourceSets.testMod
        //         }
        //     }

        //     lazyToken("minecraft_classpath") {
        //         (configurations.implementationExtra.copyRecursive().resolve())
        //                 .collect { it.absolutePath }
        //                 .join(File.pathSeparator)
        //     }
        // }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "MinecraftForge"
        url = "https://maven.minecraftforge.net"
        content {
            includeGroup("net.minecraftforge")
            includeGroup("net.minecraftforge.gradle")
            includeGroup("org.spongepowered.mixin")
            includeGroup("org.spongepowered")
        }
    }
    maven {
        name = "Blamejared maven botania patchouli"
        url = "https://maven.blamejared.com"
        content {
            includeGroup("vazkii.botania")
            includeGroup("vazkii.patchouli")
        }
    }
    maven {
        name = "Squiddev maven cct"
        url = "https://squiddev.cc/maven/"
        content {
            includeGroup("org.squiddev")
            includeGroup("cc.tweaked")
            includeModule("org.squiddev", "Cobalt")
        }
    }
    maven {
        name = "Theillusivec4 maven curios"
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup("top.theillusivec4.curios")
        }
    }
    maven {
        name = "LDT Team minecolonies"
        url = "https://ldtteam.jfrog.io/ldtteam/modding"
        content {
            includeGroup("com.ldtteam")
        }
    }
    maven {
        name = "Modmaven Jei"
        url = "https://modmaven.dev/"
        content {
            includeGroup("mezz.jei")
            includeGroup("appeng")
            includeGroup("mekanism")
        }
    }
    maven {
        name = "Create maven"
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.simibubi.create")
            includeGroup("com.jozufozu.flywheel")
            includeGroup("com.tterrag.registrate")
        }
    }
    maven {
        name = "Shedaniel cloth"
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup("dev.architectury")
            includeGroup("me.shedaniel.cloth")
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "anything"
            password = "\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
        content {
            includeModule("com.refinedmods", "refinedstorage")
        }
    }
    maven {
        name = "Kotlin for Forge"
        url = "https://thedarkcolour.github.io/KotlinForForge/"
        content {
            includeModule("thedarkcolour", "kotlinforforge")
        }
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    implementationExtra
    testModImplementation.extendsFrom(implementation)
    testModImplementation.extendsFrom(testImplementation)
}

dependencies {
    compileOnly project(":common")

    // If some of the dependencies are not needed in the dev environment, you can comment the `runtimeOnly` line so it
    // will not be included in the client.

    // Minimal requirements

    compileOnly "org.jetbrains:annotations:${jb_annotations}"
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("org.squiddev:cc-tweaked-${minecraft_version}:${cc_version}")

    // Compile-time API required

    // Ae2
    implementation fg.deobf("appeng:appliedenergistics2-forge:${appliedenergistics_version}")

    // Applied Mekanistics
    implementation fg.deobf("curse.maven:applied-mekanistics-574300:${appliedmekanistics_version}")

    // Curios
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    // Minimal requirements end

    // Extended requirements

    // We don"t use the api since we need a specific class from mekanism
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}")

    // Applied Energistics 2
    compileOnly fg.deobf("appeng:appliedenergistics2-forge:${appliedenergistics_version}")
    runtimeOnly fg.deobf("appeng:appliedenergistics2-forge:${appliedenergistics_version}")

    // Applied Mekanistics
    implementation fg.deobf("curse.maven:applied-mekanistics-574300:${appliedmekanistics_version}")

    // Curios
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    // Refined Storage
    compileOnly fg.deobf("com.refinedmods:refinedstorage:${refinedstorage_version}") {
        transitive false
    }
    runtimeOnly fg.deobf("com.refinedmods:refinedstorage:${refinedstorage_version}") {
        transitive false
    }

    // AE2 Things
    compileOnly fg.deobf("curse.maven:ae2things-609977:${ae2things_version}-sources")
    //runtimeOnly fg.deobf("curse.maven:ae2things-609977:${ae2things_version}-sources")

    // AE2 Additions
    compileOnly fg.deobf("curse.maven:ae-additions-493962:${ae2additions_version}")
    //runtimeOnly fg.deobf("curse.maven:ae-additions-493962:${ae2additions_version}")

    implementation fg.deobf("thedarkcolour:kotlinforforge:${kotlinforforge_version}")

    // Botania
    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")

    // Minecolonies
    // Change to compileOnly when running `runData`
    compileOnly fg.deobf("com.ldtteam:minecolonies:${minecolonies_version}")
    compileOnly fg.deobf("com.ldtteam:structurize:${structurize_version}")
    compileOnly fg.deobf("com.ldtteam:multipiston:${multipiston_version}")
    compileOnly fg.deobf("com.ldtteam:domum_ornamentum:${domumornamentum_version}:universal")
    compileOnly fg.deobf("com.ldtteam:blockui:${blockui_version}")
    // IMPORTANT. This should be removed/uncommented when running `runData`
    runtimeOnly fg.deobf("com.ldtteam:minecolonies:${minecolonies_version}")
    runtimeOnly fg.deobf("com.ldtteam:structurize:${structurize_version}")
    runtimeOnly fg.deobf("com.ldtteam:multipiston:${multipiston_version}")
    runtimeOnly fg.deobf("com.ldtteam:domum_ornamentum:${domumornamentum_version}:universal")
    runtimeOnly fg.deobf("com.ldtteam:blockui:${blockui_version}")

    // Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Create
    compileOnly fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:all")
    //    runtimeOnly fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:all")

    //DimStorage
    compileOnly fg.deobf("curse.maven:dimstorage-353882:${dimstorage_version}")
    runtimeOnly fg.deobf("curse.maven:dimstorage-353882:${dimstorage_version}")
    compileOnly fg.deobf("curse.maven:edivadlib-638508:${edivadlib_version}")
    runtimeOnly fg.deobf("curse.maven:edivadlib-638508:${edivadlib_version}")

    //Removed until fully ported
    //testImplementation fg.deobf("site.siredvin.ttoolkit:ttoolkit-${minecraft_version}:${ttoolkit_version}")

    //Powah
    compileOnly fg.deobf("curse.maven:powah-633483:${powah_version}")
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.2.88")
    compileOnly fg.deobf("dev.architectury:architectury-forge:6.2.43")

    compileOnly fg.deobf("curse.maven:crash-utilities-371813:4406293")

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testImplementation "org.hamcrest:hamcrest:${hamcrest_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinx_coroutines_version}"
    testModImplementation sourceSets.main.output

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    // Testing stuff

    // JEI
    implementation fg.deobf("mezz.jei:jei-${jei_version}")

    // Jade
    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")

    // Create Crafts & Additions
    compileOnly fg.deobf("curse.maven:createaddition-439890:5099757")
    // runtimeOnly fg.deobf("curse.maven:createaddition-439890:5099757")
}


tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

compileTestModJava {
    dependsOn(compileJava)
}

task setupServer(type: Copy) {
    group "test server"
    description "Sets up the environment for the test server."

    from("src/testMod/server-files") {
        include "eula.txt"
        include "server.properties"
    }
    into "test-files/server"
}

["Client", "Server"].forEach { name ->
    tasks.register("test$name", JavaExec.class).configure {
        it.group("In-game tests")
        it.description("Runs tests on a temporary Minecraft instance.")
        it.dependsOn(setupServer, "prepareRunTest$name", "cleanTest$name", "compileTestModJava")

        JavaExec exec = tasks.getByName("runTest$name")
        exec.copyTo(it)
        it.setClasspath(exec.getClasspath())
        it.mainClass = exec.mainClass
        it.setArgs(exec.getArgs())

        it.systemProperty("forge.logging.console.level", "debug")
        it.systemProperty("ttoolkit.run", "true")
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

jar.finalizedBy("reobfJar")
