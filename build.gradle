import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.text.SimpleDateFormat

plugins {
    id 'maven-publish'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id 'org.jetbrains.changelog' version '1.2.1'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'com.github.breadmoirai.github-release' version '2.5.2'
    id 'checkstyle'
    id 'java'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

wrapper {
    gradleVersion = '8.4'
    distributionType = Wrapper.DistributionType.ALL
}

def isSnapshotVersion = project.hasProperty('teamcityBuild')

version = "${mod_version}" + (isSnapshotVersion ? "-SNAPSHOT" : "")
group = 'de.srendi.advancedperipherals'

def static getenv(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            def (name, value) = line.tokenize("=")
            if (value != null) {
                env[name.trim()] = value.trim()
            }
        }
    }

    return env
}

def secretEnv = getenv()
def curseforgeKey = secretEnv["CURSEFORGE_KEY"] ?: System.getenv("CURSEFORGE_KEY") ?: ''
def modrinthKey = secretEnv["MODRINTH_KEY"] ?: System.getenv("MODRINTH_KEY")
def repositoryName = secretEnv["PUBLIC_REP_NAME"] ?: System.getenv("PUBLIC_REP_NAME")
def repositoryKey = secretEnv["PUBLIC_REP_KEY"] ?: System.getenv("PUBLIC_REP_KEY")
def githubKey = secretEnv["GITHUB_KEY"] ?: System.getenv("GITHUB_KEY")


changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${minecraft_version}-${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    //Valid patterns would be
    //1.16.5-1.1.1.1b
    //1.18-1.0r
    //1.19-1.0.0a
    headerParserRegex = ~/\d+(\.\d+){1,2}-\d+(\.\d+){1,3}\w/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = []
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = false
    }
    // Checkstyle is compatible with the configuration cache, however we need to disable it to prevent a build issue with teamcity
    notCompatibleWithConfigurationCache()
    outputs.upToDateWhen { false }
}

tasks.register('publishCurseForge', TaskPublishCurseForge, { task ->
    setGroup("publishing")
    setDescription("Upload Advanced Peripherals to CurseForge")

    // This token is used to authenticate with CurseForge. It should be handled
    // with the same level of care and security as your actual password. You
    // should never share your token with an untrusted source or publish it
    // publicly to GitHub or embed it within a project. The best practice is to
    // store this token in an environment variable or a build secret.
    apiToken = curseforgeKey

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    task.upload(431725, jar) { file ->
        try {
            file.changelog = "${project.changelog.get("${minecraft_version}-${project.version}").withHeader(false).toText()}"
            file.changelogType = "markdown"
        } catch (err) {
            System.out.println(err)
            file.changelog = ""
        }

        addOptional('applied-energistics-2', 'curios', 'mekanism', 'refined-storage')

        addRequirement('cc-tweaked')

        addModLoader("forge")

        releaseType = "${release_type}"
    }
})

githubRelease {
    releaseAssets = jar.archiveFile

    if (githubKey != null)
        token = githubKey
    owner = "IntelligenceModding"
    repo = "AdvancedPeripherals"
    tagName = "${minecraft_version}-${version}"
    releaseName = "${minecraft_version}-${version}"
    targetCommitish = "release/${minecraft_version}"
    generateReleaseNotes = false
    try {
        body = "${project.changelog.get("${minecraft_version}-${version}").withHeader(false).toText()}"
    } catch (err) {
        System.out.println(err)
        body = ""
    }
    draft = false
    prerelease = !release_type.equalsIgnoreCase("release")
}

modrinth {
    token = modrinthKey
    projectId = 'SOw6jD6x'
    versionNumber = "${minecraft_version}-${project.version}"
    versionName = "Advanced Peripherals ${minecraft_version} ${version}"
    versionType = release_type
    uploadFile = jar
    gameVersions = [minecraft_version]
    loaders = ["forge"]
    dependencies {
        required.project "cc-tweaked"
    }

    try {
        changelog = "${project.changelog.get("${minecraft_version}-${project.version}").withHeader(false).toText()}"
    } catch (err) {
        System.out.println(err)
        changelog = ""
    }
}
